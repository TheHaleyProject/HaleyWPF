<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:hm="http://schemas.hpod9.com/haley/mvvm"
    xmlns:bc="clr-namespace:Haley.WPF.Controls"
    xmlns:ml="clr-namespace:Haley.Models">

    <ResourceDictionary.MergedDictionaries>
        <hm:CommonDictionary Source="pack://application:,,,/Haley.WPF;component/Dictionaries/Common/ToggleButtonCommon.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="internal_tglebtn_BorderCircular" TargetType="{x:Type Border}" BasedOn="{StaticResource internal_tglebtn_CommonBorder}">
        <!--The Corners should be circular. A simple converter to divide the Actual height by 2 and set as corner radius.-->
        <Setter Property="CornerRadius" Value="{Binding Path=ActualHeight,Converter={StaticResource HalfValue},RelativeSource={RelativeSource Self}}"/>
    </Style>

    <Style x:Key="internal_tglebtn_SwitchCircular" TargetType="{x:Type Border}" BasedOn="{StaticResource internal_tglebtn_switchbtn}">
        <!--The Corners should be circular. A simple converter to divide the Actual height by 2 and set as corner radius.-->
        <Setter Property="CornerRadius" Value="{Binding Path=ActualHeight,Converter={StaticResource HalfValue},RelativeSource={RelativeSource Self}}"/>
    </Style>
    
    <Style x:Key="CircularToggleButton" TargetType="{x:Type bc:PlainToggleButton}">
        <Setter Property="Background" Value="{DynamicResource def_button_background}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="{DynamicResource def_border_brush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type bc:PlainToggleButton}">
                    <!--Base border which lays at the bottom and covers whole length and will be filled with the color representing the status-->
                    <Border x:Name="PART_BorderMain" Style="{StaticResource internal_tglebtn_BorderCircular}">
                        <Grid x:Name="grdMain">

                            <!--First item is a grid which covers whole length and is used for displaying the text. This sits above the Main border-->
                            <Grid Margin="1">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition/>
                                </Grid.ColumnDefinitions>
                                <TextBlock x:Name="txtStatus" HorizontalAlignment="Center" VerticalAlignment="Center" Background="Transparent" Style="{StaticResource internal_tglebtn_txtblckStyle}"/>
                            </Grid>

                            <!--Second item is the switch which will be moved left or light based on status-->
                            <Border x:Name="switchBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" Width="{Binding Path=ActualHeight, RelativeSource={RelativeSource Self}}" Background="{TemplateBinding Background}" Style="{StaticResource internal_tglebtn_SwitchCircular}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--For disabled status-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
