<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:hm="http://schemas.hpod9.com/haley/mvvm"
    xmlns:bc="clr-namespace:Haley.WPF.Controls"
    xmlns:ml="clr-namespace:Haley.Models">

    <ResourceDictionary.MergedDictionaries>
        <hm:CommonDictionary Source="pack://application:,,,/Haley.WPF;component/Dictionaries/Common/ToggleButtonCommon.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="internal_tglebtn_plainImage" TargetType="{x:Type bc:PlainImage}">
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Visibility" Value="Collapsed"/>
        <Setter Property="ml:Icon.Default" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Icon}"/>
        <Setter Property="ml:Hover.IsEnabled" Value="{Binding RelativeSource={RelativeSource TemplatedParent},Path=(ml:Hover.IsEnabled)}"/>
    </Style>
    
    <!--#region  DEFAULT-->
    <Style TargetType="{x:Type bc:ImageToggleButton}">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Height" Value="{StaticResource def_height}"/>
        <Setter Property="Width" Value="{Binding Path=ActualHeight, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="ColorON" Value="{DynamicResource def_toggle_on}"/>
        <Setter Property="ColorOFF" Value="{DynamicResource def_toggle_off}"/>
        <Setter Property="ml:Hover.IsEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type bc:ImageToggleButton}">
                    <!--Base border which lays at the bottom and covers whole length and will be filled with the color representing the status-->
                    <Border x:Name="PART_BorderMain" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{x:Null}">
                        <Grid>
                            <bc:PlainImage x:Name="Image_ON"    ml:Icon.DefaultColor="{TemplateBinding ColorON}" Style="{StaticResource internal_tglebtn_plainImage}"/>
                            <bc:PlainImage x:Name="Image_OFF" ml:Icon.DefaultColor="{TemplateBinding ColorOFF}" ml:Icon.Default="{TemplateBinding OffIcon}"  Style="{StaticResource internal_tglebtn_plainImage}"/>
                            <bc:PlainImage x:Name="Image_NULL"  ml:Icon.DefaultColor="{DynamicResource def_border_brush}" Style="{StaticResource internal_tglebtn_plainImage}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--For disabled status-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>

                        <!--When Value is true-->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="Image_ON" Property="Visibility" Value="Visible"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource def_toggle_on}"/>
                        </Trigger>
                        
                        <!--When value is false-->
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="Image_OFF" Property="Visibility" Value="Visible"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource def_toggle_off}"/>
                        </Trigger>

                        <!--When value is null-->
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="Image_NULL" Property="Visibility" Value="Visible"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource def_border_brush}"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
    
</ResourceDictionary>
