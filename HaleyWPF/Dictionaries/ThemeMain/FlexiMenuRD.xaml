<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:bc="clr-namespace:Haley.WPF.Controls"
    xmlns:enums="clr-namespace:Haley.Enums"
    xmlns:mdl="clr-namespace:Haley.Models"
    xmlns:ul="clr-namespace:Haley.Utils">

    <ResourceDictionary.MergedDictionaries>
        <mdl:CommonDictionary Source="pack://application:,,,/Haley.WPF;component/Dictionaries/haleyThemeExtra.xaml" />
        <mdl:CommonDictionary Source="pack://application:,,,/Haley.WPF;component/Dictionaries/haleyBase.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style x:Key="internal_flexiMenu_cmbBtn" TargetType="{x:Type bc:ComboButton}">
        <Setter Property="Height" Value="{Binding Path=MenuItemHeight, RelativeSource={RelativeSource AncestorType={x:Type bc:FlexiMenu}}}" />
        <Setter Property="ImageLocation" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="Margin" Value="5" />
        <Setter Property="Foreground" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type bc:FlexiMenu}}}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="mdl:Icon.HoverColor" Value="{Binding Path=(mdl:Icon.HoverColor), RelativeSource={RelativeSource AncestorType={x:Type bc:FlexiMenu}}}" />
        <Setter Property="mdl:Hover.Background" Value="{Binding Path=(mdl:Hover.Background), RelativeSource={RelativeSource AncestorType={x:Type bc:FlexiMenu}}}" />
        <Setter Property="mdl:Icon.DefaultColor" Value="{Binding Path=(mdl:Icon.DefaultColor), RelativeSource={RelativeSource AncestorType={x:Type bc:FlexiMenu}}}" />
        
        <Setter Property="HideContent" Value="False" />
        <Style.Triggers>
            <DataTrigger Value="False" Binding="{Binding IsMenuBarOpen, RelativeSource={RelativeSource AncestorType={x:Type bc:FlexiMenu}}}">
                <Setter Property="HideContent" Value="True"/>
                <Setter Property="Height" Value="30" />
                <Setter Property="mdl:Icon.HoverColor" Value="{DynamicResource def_accent_secondary}" />
                <Setter Property="HorizontalContentAlignment" Value="Center" />
            </DataTrigger>
            <DataTrigger Value="{x:Static enums:Alignment.Right}" Binding="{Binding MenuItemsAlignment, RelativeSource={RelativeSource AncestorType={x:Type bc:FlexiMenu}}}">
                <Setter Property="ImageLocation" Value="Right" />
                <Setter Property="HorizontalContentAlignment" Value="Left"/>
            </DataTrigger>
           
            <DataTrigger Value="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource MultiBindingEqualityCheck}">
                        <!--As of now, multibinding equality check converter only checks the string values.-->
                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type bc:FlexiMenu}}" Path="ActiveMenu"/>
                        <Binding RelativeSource="{RelativeSource Self}" Path="Tag"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter Property="Background" Value="{Binding SelectedMenuColor, RelativeSource={RelativeSource AncestorType={x:Type bc:FlexiMenu}}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type bc:FlexiMenu}">
        <Setter Property="mdl:Hover.Background" Value="{DynamicResource def_fleximenu_hoverbg}" />
        <Setter Property="mdl:Icon.DefaultColor" Value="{DynamicResource def_accent_primary}" />
        <Setter Property="mdl:Icon.HoverColor" Value="{DynamicResource def_fleximenu_icon_hover}" />
        <Setter Property="Foreground" Value="{DynamicResource def_content}"/>
        <Setter Property="Background" Value="{DynamicResource def_fleximenu_bg}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource def_border_brush}"/>
        <Setter Property="SelectedMenuColor" Value="{DynamicResource def_button_hover}"/>
        <Setter Property="ToggleIcon" Value="{StaticResource hamburger_square}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type bc:FlexiMenu}">
                    <DockPanel LastChildFill="True">
                        <Border
                            x:Name="PART_brderMain"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            DockPanel.Dock="Left" 
                            Width="{Binding MenuBarWidth, RelativeSource={RelativeSource TemplatedParent}}">

                            <!--<Border.Triggers>
                                <EventTrigger RoutedEvent="Border.Loaded">
                                  <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation
                Storyboard.TargetName="PART_brderMain"
                Storyboard.TargetProperty="(Border.Width)" From="5"
                Duration="0:0:0.5"/>
                                  </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                            </Border.Triggers>-->

                            <Border.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="Toggle Dock Location" CommandParameter="Location" Command="{x:Static ul:AdditionalCommands.Toggle}" CommandTarget="{Binding Path=PlacementTarget,RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                                    <MenuItem Header="Toggle MenuItems Location" CommandParameter="MenuItems" Command="{x:Static ul:AdditionalCommands.Toggle}" CommandTarget="{Binding Path=PlacementTarget,RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                                    <MenuItem x:Name="PART_MenuItem_RepositionPanel" Header="Reposition FloatingPanel" Command="{x:Static ul:AdditionalCommands.Reset}" CommandTarget="{Binding Path=PlacementTarget,RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                                    <MenuItem x:Name="PART_MenuItem_ShowPanel" Header="Show FloatingPanel" CommandParameter="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Command="{x:Static ul:AdditionalCommands.Show}" IsCheckable="True" IsChecked="True" CommandTarget="{Binding Path=PlacementTarget,RelativeSource={RelativeSource AncestorType={x:Type ContextMenu}}}"/>
                                </ContextMenu>
                            </Border.ContextMenu>
                            
                            <Grid Width="Auto">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" /> <!--HEADER-->
                                    <RowDefinition Height="Auto" /> <!--SEPARATOR-->
                                    <RowDefinition /> <!--MENU ITEMS-->
                                    <RowDefinition Height="Auto" /> <!--SEPARATOR-->
                                    <RowDefinition Height="Auto" /><!--OPTION ITEMS-->
                                    <RowDefinition Height="Auto" /><!--FOOTER-->
                                </Grid.RowDefinitions>

                                <!--#region HEADER-->
                                <!--(GRID-1) MENU HEADER & LOGO-->
                                <Grid x:Name="PART_headerRegion" Height="{Binding HeaderRegionHeight, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding HideHeaderRegion, RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource BooltoVisibiliy},ConverterParameter=1}">
                                    <ContentControl x:Name="PART_header"/>
                                </Grid>

                                <Rectangle x:Name="PART_ToggleButton_screen" Grid.Row="0" Height="32" Width="32" Margin="4" Fill="{TemplateBinding ToggleButtonBackground}"  HorizontalAlignment="Right"
                                        VerticalAlignment="Top"/>

                                <!--(GRID-1 OVERLAP) Header Toggle Button (which lies outside the main grid.-->
                                <bc:ImageToggleButton x:Name="PART_toggleButton"
                                        HorizontalAlignment="Right"
                                        VerticalAlignment="Top"
                                        ColorOFF="{Binding Path=(mdl:Icon.DefaultColor),RelativeSource={RelativeSource TemplatedParent}}"
                                        ColorON="{Binding Path=(mdl:Icon.DefaultColor),RelativeSource={RelativeSource TemplatedParent}}"
                                        Icon="{Binding ToggleIcon,RelativeSource={RelativeSource TemplatedParent}}" Grid.Row="0" Height="30" Width="30" CommandParameter="Width" Command="{x:Static ul:AdditionalCommands.Toggle}" Margin="5"/>

                                <!--#endregion-->

                                <!--SEPARATOR-->
                                <bc:Separator
                                    Grid.Row="1"
                                    Background="{Binding Path=(mdl:Icon.DefaultColor),RelativeSource={RelativeSource TemplatedParent}}"
                                    Size="2" />

                                <!--#region MENU-->
                                <Grid Grid.Row="2" Margin="0,5">
                                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                                    <bc:ComboRepeatButton
                                        x:Name="upButton"
                                        Height="25"
                                        VerticalAlignment="Top"
                                        Panel.ZIndex="99"
                                        Background="Transparent"
                                        mdl:Icon.Default="{StaticResource arrow_line}"
                                        mdl:Icon.DefaultColor="{Binding Path=(mdl:Icon.DefaultColor),RelativeSource={RelativeSource TemplatedParent}}"
                                        mdl:Icon.HoverColor="{Binding Path=(mdl:Icon.HoverColor),RelativeSource={RelativeSource TemplatedParent}}"
                                        RenderTransformOrigin="0.5,0.5">
                                        <bc:ComboRepeatButton.RenderTransform>
                                            <TransformGroup>
                                                <RotateTransform Angle="180" />
                                            </TransformGroup>
                                        </bc:ComboRepeatButton.RenderTransform>
                                    </bc:ComboRepeatButton>
                                    <bc:ComboRepeatButton
                                        x:Name="downButton"
                                        Grid.Row="2"
                                        Height="25"
                                        VerticalAlignment="Bottom"
                                        Panel.ZIndex="99"
                                        Background="Transparent"
                                        mdl:Icon.DefaultColor="{Binding Path=(mdl:Icon.DefaultColor),RelativeSource={RelativeSource TemplatedParent}}"
                                        mdl:Icon.HoverColor="{Binding Path=(mdl:Icon.HoverColor),RelativeSource={RelativeSource TemplatedParent}}"
                                        mdl:Icon.Default="{StaticResource arrow_line}" />

                                    <bc:FlexiScroll
                                        x:Name="MenuFlexiScroll"
                                        Grid.Row="1"
                                        Panel.ZIndex="1"
                                        CanContentScroll="True"
                                        HorizontalScrollBarVisibility="Hidden"
                                        RepeatDown="{Binding ElementName=downButton}"
                                        RepeatUp="{Binding ElementName=upButton}"
                                        VerticalScrollBarVisibility="Hidden" Visibility="{Binding HideMenuRegion, RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource BooltoVisibiliy},ConverterParameter=1}">
                                        <bc:PlainListView x:Name="PART_MenuSource" ItemsSource="{Binding MenuItems, RelativeSource={RelativeSource TemplatedParent}}" SelectionMode="Single" Style="{StaticResource CleanListView}">
                                            <bc:PlainListView.ItemTemplate>
                                                <DataTemplate>
                                                    <bc:ComboButton
                                                        Content="{Binding Label,NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"
                                                        Style="{StaticResource internal_flexiMenu_cmbBtn}" CommandParameter="{Binding}" Command="{x:Static ul:AdditionalCommands.ProcessMenuAction}" mdl:Icon.Default="{Binding Path=(mdl:Icon.Default)}" mdl:Icon.Hover="{Binding Path=(mdl:Icon.Hover)}" ToolTip="{Binding Label}" Tag="{Binding}"/>
                                                </DataTemplate>
                                            </bc:PlainListView.ItemTemplate>
                                        </bc:PlainListView>
                                    </bc:FlexiScroll>
                                </Grid>
                                <!--#endregion-->
                                
                                <!--SEPARATOR-->
                                <bc:Separator
                                    Grid.Row="3"
                                    Background="{Binding Path=(mdl:Icon.DefaultColor),RelativeSource={RelativeSource TemplatedParent}}"
                                    Size="2" />
                                
                                <!--OPTIONS MENU-->
                                <Grid Grid.Row="4">
                                    <bc:FlexiScroll
                                        x:Name="OptionsFlexiScroll"
                                        Grid.Row="1"
                                        Panel.ZIndex="1"
                                        CanContentScroll="True"
                                        HorizontalScrollBarVisibility="Hidden"
                                        VerticalScrollBarVisibility="Hidden" Visibility="{Binding HideOptionsRegion, RelativeSource={RelativeSource TemplatedParent},Converter={StaticResource BooltoVisibiliy},ConverterParameter=1}">
                                        <ListView x:Name="PART_OptionSource" Style="{StaticResource CleanListView}" ItemsSource="{Binding OptionItems, RelativeSource={RelativeSource TemplatedParent}}" SelectionMode="Single">
                                            <ListView.ItemTemplate>
                                                <DataTemplate>
                                                    <bc:ComboButton
                                                        Content="{Binding Label,NotifyOnSourceUpdated=True, UpdateSourceTrigger=PropertyChanged}"
                                                        Style="{StaticResource internal_flexiMenu_cmbBtn}" CommandParameter="{Binding}" Command="{x:Static ul:AdditionalCommands.ProcessOptionsAction}" mdl:Icon.Default="{Binding Path=(mdl:Icon.Default)}" mdl:Icon.Hover="{Binding Path=(mdl:Icon.Hover)}" ToolTip="{Binding Label}"/>
                                                </DataTemplate>
                                            </ListView.ItemTemplate>
                                        </ListView>
                                    </bc:FlexiScroll>
                                </Grid>
                                
                                <!--FOOT NOTE-->
                                <Grid Grid.Row="5" Margin="5" x:Name="PART_footerRegion" Visibility="{TemplateBinding ShowFooter,Converter={StaticResource BooltoVisibiliy}}">
                                    <TextBlock Foreground="{DynamicResource def_link}" Style="{StaticResource def_h4_inverted}" Text="{Binding FootNote, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Grid>
                            </Grid>
                        </Border>
                        <Grid>
                            <!--MAIN REGION-->
                            <Grid TextBlock.Foreground="{DynamicResource def_content}">
                                    <ContentControl x:Name="PART_MainContentArea"/>
                                <!--MESSAGE BAR-->
                                <Border x:Name="PART_messageHolder" MinHeight="30" Height="Auto"  VerticalAlignment="Top" Background="#FFE4E8CB" Margin="15" CornerRadius="5" Visibility="Collapsed" RenderTransformOrigin="0.5,0.5">
                                        <Border.Effect>
                                            <DropShadowEffect ShadowDepth="0" Color="#FF423F3F" BlurRadius="2"/>
                                        </Border.Effect>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="30"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBlock x:Name="PART_message" VerticalAlignment="Center" Margin="5" Foreground="#FF384B8C" TextWrapping="WrapWithOverflow" FontSize="11"/>
                                            <Viewbox HorizontalAlignment="Right" Margin="5" VerticalAlignment="Top" Grid.Column="1">
                                                <bc:ImageButton mdl:Icon.Default="{StaticResource stop}" Command="{x:Static ApplicationCommands.Close}" mdl:Icon.DefaultColor="Gray"/>
                                            </Viewbox>
                                        </Grid>
                                    <Border.Style>
                                        <Style TargetType="{x:Type Border}">
                                            <Style.Triggers>
                                                <Trigger Property="Visibility" Value="Visible">
                                                    <Trigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <!--<DoubleAnimation  Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" From="0" To="100" Duration="00:04:0" />-->
                                                                <DoubleAnimation  Storyboard.TargetProperty="Opacity" From="0" To="100" Duration="00:01:0" />
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </Trigger.EnterActions>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Border.Style>
                                    </Border>
                            </Grid>
                            
                            <!--Floating Panel Display-->
                            <Canvas x:Name="PART_FloatingPanelHolderCanvas" >
                                <ContentControl x:Name="PART_FloatingPanel" Height="Auto" Width="Auto" MinHeight="50" MinWidth="50" Style="{StaticResource FloatingPanel}" Visibility="{TemplateBinding IsFloatingPanelVisible, Converter={StaticResource BooltoVisibiliy}}"/>
                            </Canvas>
                        </Grid>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Location" Value="Right">
                            <Setter TargetName="PART_brderMain" Property="DockPanel.Dock" Value="Right" />
                        </Trigger>

                        <Trigger Property="IsMenuBarOpen" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_brderMain" Storyboard.TargetProperty="Width"
                  From="45" Duration="0:0:0.3" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                        
                        <Trigger Property="IsMenuBarOpen" Value="False">
                            <Setter TargetName="PART_toggleButton" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="PART_footerRegion" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_headerRegion" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PART_brderMain" Property="Width" Value="45" />
                            <Setter TargetName="PART_ToggleButton_screen" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        
                        <DataTrigger Binding="{Binding Path=VerticalOffset, ElementName=MenuFlexiScroll}" Value="0">
                            <Setter TargetName="upButton" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        
                        <DataTrigger Value="True">
                            <DataTrigger.Binding>
                                <MultiBinding Converter="{StaticResource ScrollLimit}">
                                    <Binding ElementName="MenuFlexiScroll" Path="VerticalOffset"/>
                                    <Binding ElementName="MenuFlexiScroll" Path="ScrollableHeight"/>
                                </MultiBinding>
                            </DataTrigger.Binding>
                            <Setter TargetName="downButton" Property="Visibility" Value="Collapsed"/>
                            
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
</ResourceDictionary>